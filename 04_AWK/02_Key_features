Key Features of AWK:

Pattern Matching: AWK processes each line of a file based on patterns and performs specific actions 
when a pattern matches.

Field Processing: It treats each line as a record and divides it into fields, which are accessible 
using $1, $2, etc., where $1 is the first field, $2 is the second, and so on.


Built-in Variables: AWK has several built-in variables like:
    * NR: The current record number.
    * NF: The number of fields in the current record.
    * FS: The field separator (default is space or tab).
    * OFS: The output field separator.

Basic Syntax:

    awk 'pattern { action }' filename

        * pattern: The pattern to search for.
        * action: The action to take when the pattern matches.
        * filename: The name of the file to process.

-------------------------------------------------------------------------

Example usages: 

    1. Print all ines in a file:
        awk '{ print }' filename.

    2. Print specific field.
        awk '{ print $1, $3 }' filename

            This prints first and third field of each line.
    
    3. Filter lines.
        awk '/pattern/ '{ print }' filename

            This prints only the lines that contain the specified pattern.

    4. Sum a column:
        awk '{sum+= $2} END '{ print sum }' filename

            This sums value in the second field and prints the total after processing all lines.

-----------------------------------------------------------------------------

Why to use awk?

    AWK is very handy for:
        Extracting data from structured text files.
        Formatting text for reports.
        Quick text manipulation without needing more complex tools like sed or scripting languages.

    It's a versatile tool that can be very useful in many scripting and text-processing tasks.



    
